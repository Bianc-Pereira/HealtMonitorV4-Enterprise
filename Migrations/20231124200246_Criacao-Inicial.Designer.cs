// <auto-generated />
using System;
using HealtMonitorV4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealtMonitorV4.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231124200246_Criacao-Inicial")]
    partial class CriacaoInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealtMonitorV4.Models.ConsultaModel", b =>
                {
                    b.Property<int>("CodigoConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodigoConsulta"));

                    b.Property<int>("CodigoHospital")
                        .HasColumnType("integer");

                    b.Property<string>("CrmMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataConsulta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HospitalCodigoHospital")
                        .HasColumnType("integer");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("integer");

                    b.Property<string>("MedicoIdMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PacienteIdPaciente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodigoConsulta");

                    b.HasIndex("HospitalCodigoHospital");

                    b.HasIndex("MedicoIdMedico");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.EnderecoModel", b =>
                {
                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Cep");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.HospitalModel", b =>
                {
                    b.Property<int>("CodigoHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodigoHospital"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCep")
                        .HasColumnType("text");

                    b.Property<string>("NomeHospital")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodigoHospital");

                    b.HasIndex("EnderecoCep");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.MedicoModel", b =>
                {
                    b.Property<string>("IdMedico")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<int?>("CodigoHospital")
                        .HasColumnType("integer");

                    b.Property<string>("CpfMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CrmMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataNascimento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCep")
                        .HasColumnType("text");

                    b.Property<int>("HospitalCodigoHospital")
                        .HasColumnType("integer");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMedico");

                    b.HasIndex("EnderecoCep");

                    b.HasIndex("HospitalCodigoHospital");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.PacienteModel", b =>
                {
                    b.Property<string>("IdPaciente")
                        .HasColumnType("text");

                    b.Property<string>("CelEmergencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CpfPaciente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataNascimento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailPaciente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCep")
                        .HasColumnType("text");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RgPaciente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPaciente");

                    b.HasIndex("EnderecoCep");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.ProntuarioModel", b =>
                {
                    b.Property<int>("IdProntuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProntuario"));

                    b.Property<string>("FreqCardiaca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FreqResp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdMedico")
                        .HasColumnType("integer");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("integer");

                    b.Property<string>("MedicoIdMedico")
                        .HasColumnType("text");

                    b.Property<string>("PacienteIdPaciente")
                        .HasColumnType("text");

                    b.Property<string>("PressaoArt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prioridade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SatOxig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TempCorporal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdProntuario");

                    b.HasIndex("MedicoIdMedico");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("Prontuario");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.ConsultaModel", b =>
                {
                    b.HasOne("HealtMonitorV4.Models.HospitalModel", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalCodigoHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealtMonitorV4.Models.MedicoModel", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoIdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealtMonitorV4.Models.PacienteModel", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.HospitalModel", b =>
                {
                    b.HasOne("HealtMonitorV4.Models.EnderecoModel", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoCep");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.MedicoModel", b =>
                {
                    b.HasOne("HealtMonitorV4.Models.EnderecoModel", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoCep");

                    b.HasOne("HealtMonitorV4.Models.HospitalModel", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalCodigoHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.PacienteModel", b =>
                {
                    b.HasOne("HealtMonitorV4.Models.EnderecoModel", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoCep");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("HealtMonitorV4.Models.ProntuarioModel", b =>
                {
                    b.HasOne("HealtMonitorV4.Models.MedicoModel", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoIdMedico");

                    b.HasOne("HealtMonitorV4.Models.PacienteModel", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteIdPaciente");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
